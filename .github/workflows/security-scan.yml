# .github/workflows/security-scan.yml
name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1' # Runs every Monday at 2:00 AM UTC

env:
  NOTIFICATION_EMAILS: "maria@thewellfitcommunity.org"

jobs:
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install tooling
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          npm install -g audit-ci

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Initialize summary
        run: |
          echo "## 🔒 Security Scan – WellFit Community" >> $GITHUB_STEP_SUMMARY
          echo "Started at $(date -u '+%Y-%m-%d %H:%M:%S') UTC" >> $GITHUB_STEP_SUMMARY
          echo "FAIL=0" >> $GITHUB_ENV

      # ============================================
      # Scan for insecure HTTP/WS protocols
      # ============================================
      - name: Scan for insecure protocols
        id: insecure-scan
        run: |
          echo "## Insecure Protocol Scan" >> $GITHUB_STEP_SUMMARY

          MATCH_HTTP=$(grep -RniE '\bhttp://' . \
            --exclude-dir=node_modules --exclude-dir=build --exclude-dir=dist --exclude-dir=.git --exclude-dir=archive --exclude-dir=coverage \
            --exclude=package-lock.json --exclude=yarn.lock --exclude=logo.png 2>/dev/null | \
            grep -v "localhost" | grep -v "127\.0\.0\.1" | grep -v "0\.0\.0\.0" | \
            grep -v "schemas\." | grep -v "loinc\.org" | grep -v "snomed\.info" | \
            grep -v "terminology\.hl7\.org" | grep -v "hl7\.org/fhir" | \
            grep -v "unitsofmeasure\.org" | grep -v "wellfitcommunity\.org" | \
            grep -v "wellfit-community\.com" | grep -v "wellfit.*\.com" | \
            grep -v "www\.w3\.org" | grep -v "www\.ama-assn\.org" | \
            grep -v "www\.nlm\.nih\.gov" | grep -v "pillbox\.nlm\.nih\.gov" | \
            grep -v "example\.com" | grep -v "xmlns=" | \
            grep -v "\.md:" | grep -v "\.html:" | grep -v "\.svg:" | \
            grep -v "\.json:" | grep -v "\.test\." || true)
          
          MATCH_WS=$(grep -RniE '\bws://(?!localhost\b|127\.0\.0\.1\b|0\.0\.0\.0\b)' . \
            --exclude-dir=node_modules --exclude-dir=build --exclude-dir=dist --exclude-dir=.git 2>/dev/null || true)

          if [ -n "$MATCH_HTTP" ] || [ -n "$MATCH_WS" ]; then
            echo "### ❌ Insecure protocol references found:" >> $GITHUB_STEP_SUMMARY
            {
              echo '```'
              [ -n "$MATCH_HTTP" ] && echo "$MATCH_HTTP"
              [ -n "$MATCH_WS" ] && echo "$MATCH_WS"
              echo '```'
            } >> $GITHUB_STEP_SUMMARY
            echo "FAIL=1" >> $GITHUB_ENV
          else
            echo "✅ No insecure protocol references found." >> $GITHUB_STEP_SUMMARY
          fi

      # ============================================
      # NPM Security Audit
      # ============================================
      - name: Run npm audit
        run: |
          echo "## NPM Security Audit" >> $GITHUB_STEP_SUMMARY
          npm audit --audit-level=low --json > audit-results.json || true

          if [ -s audit-results.json ]; then
            TOTAL=$(jq '.metadata.vulnerabilities.total // 0' audit-results.json)
            HIGH=$(jq '.metadata.vulnerabilities.high // 0' audit-results.json)
            CRIT=$(jq '.metadata.vulnerabilities.critical // 0' audit-results.json)

            echo "- Total vulnerabilities: $TOTAL | High: $HIGH | Critical: $CRIT" >> $GITHUB_STEP_SUMMARY

            if [ "$TOTAL" -gt 0 ]; then
              echo "### Vulnerability Details" >> $GITHUB_STEP_SUMMARY
              jq -r '
                .vulnerabilities
                | to_entries[]
                | select(.value.severity != null)
                | "- **\(.key)**: \(.value.severity) – \(.value.title)"
              ' audit-results.json >> $GITHUB_STEP_SUMMARY || echo "_Unable to parse details_" >> $GITHUB_STEP_SUMMARY
            fi

            if [ "$HIGH" -gt 0 ] || [ "$CRIT" -gt 0 ]; then
              echo "### ❌ High/Critical vulnerabilities detected." >> $GITHUB_STEP_SUMMARY
              echo "FAIL=1" >> $GITHUB_ENV
            else
              echo "✅ No High/Critical vulnerabilities." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "ℹ️ npm audit produced no output." >> $GITHUB_STEP_SUMMARY
          fi

      # ============================================
      # CodeQL Security Analysis
      # ============================================
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          output: results

      - name: Check CodeQL Results
        run: |
          echo "## CodeQL Severity Check" >> $GITHUB_STEP_SUMMARY

          MIN_SEVERITY=8.9

          shopt -s nullglob
          files=(results/*.sarif results/**/*.sarif)
          
          if [ ${#files[@]} -eq 0 ]; then
            echo "ℹ️ No SARIF files found. Skipping CodeQL gate." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          total=0
          for sarif in "${files[@]}"; do
            count=$(jq --argjson min "$MIN_SEVERITY" '
              [
                .runs[].results[]? as $r
                | (
                    ($r.properties."security-severity"? // $r.rule.properties."security-severity"? // null) as $ss
                    |
                    if ($ss != null) then
                      (($ss|tostring)|tonumber) >= $min
                    else
                      ($r.level? // "") | ascii_downcase == "error"
                    end
                  )
              ] | map(select(.)) | length
            ' "$sarif")
            total=$(( total + count ))
          done

          echo "- Severity threshold: >= $MIN_SEVERITY" >> $GITHUB_STEP_SUMMARY
          echo "- High/Critical findings: $total" >> $GITHUB_STEP_SUMMARY

          if [ "$total" -gt 0 ]; then
            echo "### ❌ CodeQL detected $total high-severity issue(s)" >> $GITHUB_STEP_SUMMARY
            echo "FAIL=1" >> $GITHUB_ENV
          else
            echo "✅ CodeQL scan passed" >> $GITHUB_STEP_SUMMARY
          fi

      # ============================================
      # ESLint Security Plugin
      # ============================================
      - name: Run ESLint Security Scan
        run: |
          npm install --save-dev eslint eslint-plugin-security @typescript-eslint/parser @typescript-eslint/eslint-plugin

          # Use the existing .eslintrc.security.js configuration file
          npx eslint --config .eslintrc.security.js --ext .js,.ts,.tsx src/ supabase/ --format json > eslint-security.json || true

          echo "## ESLint Security Scan" >> $GITHUB_STEP_SUMMARY

          if [ -s eslint-security.json ]; then
            ISSUES=$(jq '[.[].messages] | flatten | length' eslint-security.json)

            if [ "$ISSUES" -gt 0 ]; then
              echo "### Findings: $ISSUES issue(s) (informational)" >> $GITHUB_STEP_SUMMARY
              jq -r '
                .[] | select(.messages | length > 0)
                | .filePath as $file
                | .messages[] | "- **\($file)**: \(.message) (Line \(.line))"
              ' eslint-security.json >> $GITHUB_STEP_SUMMARY || echo "_Parse error_" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ No security issues found." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "ℹ️ ESLint produced no output." >> $GITHUB_STEP_SUMMARY
          fi

      # ============================================
      # Hardcoded Secrets Detection
      # ============================================
      - name: Check for hardcoded secrets
        run: |
          echo "## Secret Detection Scan" >> $GITHUB_STEP_SUMMARY

          PATTERNS=(
            "password[[:space:]]*=[[:space:]]*['\"][^'\"]{8,}"
            "api[_-]?key[[:space:]]*[:=][[:space:]]*['\"][^'\"]{20,}"
            "secret[_-]?key[[:space:]]*[:=][[:space:]]*['\"][^'\"]{20,}"
            "token[[:space:]]*[:=][[:space:]]*['\"][^'\"]{20,}"
            "-----BEGIN [A-Z ]+-----"
          )

          FOUND=false
          FILES=$(git ls-files | grep -Ev '(\.md$|\.png$|\.jpg$|\.jpeg$|\.gif$|\.svg$|\.ico$|\.pdf$|^node_modules/|^dist/|^build/)' || true)

          for f in $FILES; do
            for p in "${PATTERNS[@]}"; do
              if grep -E -q "$p" "$f" 2>/dev/null; then
                echo "- ⚠️ Potential secret in **$f**" >> $GITHUB_STEP_SUMMARY
                FOUND=true
                break
              fi
            done
          done

          if [ "$FOUND" = true ]; then
            echo "### ❌ Potential hardcoded secrets detected." >> $GITHUB_STEP_SUMMARY
            echo "FAIL=1" >> $GITHUB_ENV
          else
            echo "✅ No hardcoded secrets detected." >> $GITHUB_STEP_SUMMARY
          fi

      # ============================================
      # Dependency Security Check
      # ============================================
      - name: Dependency security check
        run: |
          echo "## Dependency Security" >> $GITHUB_STEP_SUMMARY

          # audit-ci: Only fail on HIGH and CRITICAL vulnerabilities
          # Moderate vulnerabilities in webpack-dev-server are dev-only and non-blocking
          audit-ci --moderate || echo "audit-ci completed"

          npm outdated --json > outdated.json || true
          
          if [ -s outdated.json ]; then
            echo "### Outdated Packages (informational):" >> $GITHUB_STEP_SUMMARY
            jq -r 'to_entries[] | "- **\(.key)**: Current \(.value.current // "n/a"), Latest \(.value.latest // "n/a")"' outdated.json >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ All packages are up to date." >> $GITHUB_STEP_SUMMARY
          fi

      # ============================================
      # Security Headers Check
      # ============================================
      - name: Check security headers
        run: |
          echo "## Security Headers Analysis" >> $GITHUB_STEP_SUMMARY
          SCORE=0

          if grep -R "Content-Security-Policy" public/ supabase/ src/ 2>/dev/null | head -1 >> /dev/null; then 
            echo "✅ Content-Security-Policy present" >> $GITHUB_STEP_SUMMARY
            SCORE=$((SCORE+1))
          fi
          
          if grep -R "X-Content-Type-Options" public/ supabase/ src/ 2>/dev/null | head -1 >> /dev/null; then 
            echo "✅ X-Content-Type-Options present" >> $GITHUB_STEP_SUMMARY
            SCORE=$((SCORE+1))
          fi
          
          if grep -R "X-Frame-Options" public/ supabase/ src/ 2>/dev/null | head -1 >> /dev/null; then 
            echo "✅ X-Frame-Options present" >> $GITHUB_STEP_SUMMARY
            SCORE=$((SCORE+1))
          fi
          
          if grep -R "Strict-Transport-Security" public/ supabase/ src/ 2>/dev/null | head -1 >> /dev/null; then 
            echo "✅ HSTS present" >> $GITHUB_STEP_SUMMARY
            SCORE=$((SCORE+1))
          fi
          
          if grep -R "Referrer-Policy" public/ supabase/ src/ 2>/dev/null | head -1 >> /dev/null; then 
            echo "✅ Referrer-Policy present" >> $GITHUB_STEP_SUMMARY
            SCORE=$((SCORE+1))
          fi
          
          if grep -R "Permissions-Policy" public/ supabase/ src/ 2>/dev/null | head -1 >> /dev/null; then 
            echo "✅ Permissions-Policy present" >> $GITHUB_STEP_SUMMARY
            SCORE=$((SCORE+1))
          fi

          echo "### Security Headers Score: $SCORE/6" >> $GITHUB_STEP_SUMMARY

      # ============================================
      # CORS Configuration Check
      # ============================================
      - name: Check CORS configuration
        run: |
          echo "## CORS Security Check" >> $GITHUB_STEP_SUMMARY

          if grep -R "Access-Control-Allow-Origin.*\*" supabase/ src/ 2>/dev/null; then
            echo "### ❌ Wildcard CORS detected - this is a security risk!" >> $GITHUB_STEP_SUMMARY
            echo "FAIL=1" >> $GITHUB_ENV
          else
            echo "✅ No wildcard CORS found" >> $GITHUB_STEP_SUMMARY
          fi

          if grep -R "ALLOWED_ORIGINS\|allowedOrigins" supabase/ src/ 2>/dev/null | head -1 >> /dev/null; then
            echo "✅ Origin allowlist implementation found" >> $GITHUB_STEP_SUMMARY
          fi

      # ============================================
      # Upload Results as Artifacts
      # ============================================
      - name: Prepare result files
        if: always()
        run: |
          touch audit-results.json eslint-security.json outdated.json

      - name: Upload scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            audit-results.json
            eslint-security.json
            outdated.json
            results/*.sarif
          if-no-files-found: ignore
          retention-days: 30

      # ============================================
      # Final Summary
      # ============================================
      - name: Finalize summary
        if: always()
        run: |
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Security Scan Complete" >> $GITHUB_STEP_SUMMARY
          echo "Completed at $(date -u '+%Y-%m-%d %H:%M:%S') UTC" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next scheduled scan:** Monday at 02:00 UTC" >> $GITHUB_STEP_SUMMARY

      # ============================================
      # Send Email Notification
      # ============================================
      - name: Send email notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{secrets.MAIL_USERNAME}}
          password: ${{secrets.MAIL_PASSWORD}}
          subject: "WellFit Security Scan Report - ${{ job.status }}"
          to: ${{ env.NOTIFICATION_EMAILS }}
          from: security-scan@thewellfitcommunity.org
          body: |
            Security Scan Status: ${{ job.status }}

            Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Trigger: ${{ github.event_name }}

            Please review the detailed results in the GitHub Actions workflow summary.

            Time: ${{ github.event.head_commit.timestamp }}
          html_body: |
            <!DOCTYPE html>
            <html>
            <head>
              <style>
                body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
                .header { background-color: #0066cc; color: white; padding: 20px; text-align: center; }
                .content { padding: 20px; }
                .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
                .success { background-color: #d4edda; border-left: 4px solid #28a745; }
                .failure { background-color: #f8d7da; border-left: 4px solid #dc3545; }
                .info { background-color: #d1ecf1; border-left: 4px solid #17a2b8; }
                .footer { margin-top: 20px; padding-top: 20px; border-top: 1px solid #ddd; font-size: 12px; color: #666; }
                a { color: #0066cc; text-decoration: none; }
                .button { display: inline-block; padding: 10px 20px; margin: 10px 0; background-color: #0066cc; color: white; text-decoration: none; border-radius: 5px; }
              </style>
            </head>
            <body>
              <div class="header">
                <h1>🔒 WellFit Security Scan Report</h1>
              </div>
              <div class="content">
                <div class="status ${{ job.status == 'success' && 'success' || 'failure' }}">
                  <strong>Status:</strong> ${{ job.status == 'success' && '✅ SUCCESS' || '❌ FAILURE' }}
                </div>

                <div class="info">
                  <h3>Scan Details</h3>
                  <ul>
                    <li><strong>Branch:</strong> ${{ github.ref_name }}</li>
                    <li><strong>Commit:</strong> <code>${{ github.sha }}</code></li>
                    <li><strong>Triggered by:</strong> ${{ github.event_name }}</li>
                    <li><strong>Time:</strong> ${{ github.event.head_commit.timestamp }}</li>
                  </ul>
                </div>

                <p>
                  <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" class="button">
                    View Full Report →
                  </a>
                </p>

                <h3>Next Steps</h3>
                <ul>
                  <li>Review the detailed scan results in the GitHub Actions workflow</li>
                  <li>Address any critical or high-severity findings immediately</li>
                  <li>Document remediation actions in the security log</li>
                </ul>
              </div>
              <div class="footer">
                <p><strong>Envision VirtualEdge Group LLC</strong> | WellFit Community Healthcare Platform</p>
                <p>This is an automated security scan notification. Next scan: Monday at 02:00 UTC</p>
              </div>
            </body>
            </html>
          priority: high

      - name: Fail job if critical issues found
        if: always()
        run: |
          if [ "${FAIL:-0}" = "1" ]; then
            echo "🔴 Critical security issues detected. Please review the summary above."
            exit 1
          else
            echo "🟢 No critical security issues found. All gates passed!"
          fi