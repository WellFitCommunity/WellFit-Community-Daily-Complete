// src/pages/ChangePasswordPage.tsx — TYPE-LITE, DROP-IN
import React, { useEffect, useMemo, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSupabaseClient } from '../contexts/AuthContext';

const MIN_LEN = 8;

function parseHashTokens() {
  const hash = (window.location.hash || '').replace(/^#/, '');
  const params = new URLSearchParams(hash);
  const access_token = params.get('access_token') || undefined;
  const refresh_token = params.get('refresh_token') || undefined;
  return { access_token, refresh_token };
}

function scorePassword(pw) {
  if (!pw || pw.length < MIN_LEN) return 'weak';
  let score = 0;
  if (/[a-z]/.test(pw)) score++;
  if (/[A-Z]/.test(pw)) score++;
  if (/\d/.test(pw)) score++;
  if (/[^A-Za-z0-9]/.test(pw)) score++;
  if (score >= 3 && pw.length >= 10) return 'strong';
  if (score >= 2) return 'ok';
  return 'weak';
}

function ChangePasswordPage() {
  const supabase = useSupabaseClient();
  const navigate = useNavigate();

  const [establishing, setEstablishing] = useState(true);
  const [hasSession, setHasSession] = useState(false);

  const [pw, setPw] = useState('');
  const [pw2, setPw2] = useState('');
  const [busy, setBusy] = useState(false);

  // use empty string instead of null to avoid union typing headaches
  const [err, setErr] = useState('');
  const [msg, setMsg] = useState('');

  const strength = useMemo(() => scorePassword(pw), [pw]);

  useEffect(() => {
    let cancelled = false;

    (async () => {
      try {
        // Check for existing session
        const s1 = await supabase.auth.getSession();
        if (!cancelled && s1?.data?.session) {
          setHasSession(true);
          setEstablishing(false);
          return;
        }

        // Try to establish session from hash tokens
        const { access_token, refresh_token } = parseHashTokens();
        if (access_token && refresh_token) {
          const s2 = await supabase.auth.setSession({ access_token, refresh_token });
          if (!cancelled) {
            if (s2.error) {
              console.warn('setSession error:', s2.error.message);
              setHasSession(false);
            } else {
              setHasSession(Boolean(s2?.data?.session));
            }
          }
        } else {
          // Final check
          const s3 = await supabase.auth.getSession();
          if (!cancelled) setHasSession(Boolean(s3?.data?.session));
        }
      } catch (e) {
        if (!cancelled) {
          console.warn('Recovery session establish error:', e);
          setHasSession(false);
        }
      } finally {
        if (!cancelled) setEstablishing(false);
      }
    })();

    return () => {
      cancelled = true;
    };
  }, [supabase]);

  async function handleSubmit(e) {
    e.preventDefault();
    setErr('');
    setMsg('');

    if (!hasSession) {
      setErr('No valid reset session found. Please open the reset link from your email again.');
      return;
    }
    if (!pw || !pw2) {
      setErr('Enter and confirm your new password.');
      return;
    }
    if (pw !== pw2) {
      setErr('Passwords do not match.');
      return;
    }
    if (scorePassword(pw) === 'weak') {
      setErr('Password is too weak. Use at least 8 characters and mix letters, numbers, and symbols.');
      return;
    }

    setBusy(true);
    try {
      const res = await supabase.auth.updateUser({ password: pw });
      if (res.error) {
        const m = (res.error.message || '').toLowerCase();
        if (m.includes('same') || m.includes('reused')) {
          setErr('That looks like a recent password. Please choose a new one.');
        } else {
          setErr('Could not update password. Please try again.');
        }
        return;
      }

      setMsg('Password updated successfully. Redirecting you to login…');
      // Clear URL hash
      if (window.location.hash) {
        history.replaceState(null, '', window.location.pathname + window.location.search);
      }
      setTimeout(() => navigate('/login', { replace: true }), 2500);
    } catch (e) {
      console.error('updateUser error:', e);
      setErr('Unexpected error. Please try again.');
    } finally {
      setBusy(false);
    }
  }

  if (establishing) {
    return (
      <div className="max-w-md mx-auto mt-16 p-8 bg-white rounded-xl shadow-md">
        <h1 className="text-xl font-semibold mb-2">One moment…</h1>
        <p className="text-sm text-gray-600">Preparing your reset session.</p>
      </div>
    );
  }

  if (!hasSession) {
    return (
      <div className="max-w-md mx-auto mt-16 p-8 bg-white rounded-xl shadow-md">
        <h1 className="text-2xl font-bold mb-2">Reset Link Required</h1>
        <p className="text-sm text-gray-700 mb-4">
          We couldn’t establish a secure reset session. Please go back to your email and click the reset link again.
        </p>
        <button
          type="button"
          onClick={() => navigate('/reset-password')}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          Request a New Link
        </button>
      </div>
    );
  }

  return (
    <div className="max-w-md mx-auto mt-16 p-8 bg-white rounded-xl shadow-md">
      <div className="text-center mb-6">
        <img
          src="/android-chrome-512x512.png"
          alt="WellFit Logo"
          className="h-16 w-auto mx-auto mb-4"
        />
        <h1 className="text-2xl font-bold mb-2">Set a New Password</h1>
        <p className="text-sm text-gray-600">
          Enter a strong password you haven’t used here before.
        </p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-4" noValidate>
        <div>
          <label htmlFor="new-password" className="block text-sm font-medium text-gray-700 mb-1">
            New Password
          </label>
          <input
            id="new-password"
            type="password"
            value={pw}
            onChange={(e) => setPw(e.target.value)}
            className="w-full p-3 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="At least 8 characters"
            required
            autoFocus
            aria-required="true"
            aria-invalid={Boolean(err)}
            autoComplete="new-password"
          />
          <p className="text-xs mt-1">
            Strength:{' '}
            <span
              className={
                strength === 'strong'
                  ? 'text-green-700'
                  : strength === 'ok'
                  ? 'text-yellow-700'
                  : 'text-red-700'
              }
            >
              {String(strength).toUpperCase()}
            </span>
          </p>
        </div>

        <div>
          <label htmlFor="confirm-password" className="block text-sm font-medium text-gray-700 mb-1">
            Confirm New Password
          </label>
          <input
            id="confirm-password"
            type="password"
            value={pw2}
            onChange={(e) => setPw2(e.target.value)}
            className="w-full p-3 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Re-enter your new password"
            required
            aria-required="true"
            aria-invalid={Boolean(err)}
            autoComplete="new-password"
          />
        </div>

        {err && (
          <div className="p-3 bg-red-50 border border-red-200 rounded" role="alert" aria-live="assertive">
            <p className="text-red-600 text-sm">{err}</p>
          </div>
        )}

        {msg && (
          <div className="p-3 bg-green-50 border border-green-200 rounded" role="status" aria-live="polite">
            <p className="text-green-700 text-sm">{msg}</p>
          </div>
        )}

        <button
          type="submit"
          className="w-full py-3 bg-blue-600 text-white rounded disabled:opacity-50 hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 font-medium"
          disabled={busy || !pw || !pw2}
        >
          {busy ? 'Updating…' : 'Update Password'}
        </button>

        <div className="text-center space-y-2">
          <button
            type="button"
            onClick={() => navigate('/login')}
            className="text-sm text-gray-600 hover:text-gray-800 underline"
          >
            Back to Login
          </button>
        </div>
      </form>
    </div>
  );
}

export default ChangePasswordPage;
