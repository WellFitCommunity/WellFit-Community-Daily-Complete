// Claims Appeals Panel - Handle denied/rejected claims
// AI-assisted appeal letter generation

import React, { useState, useEffect } from 'react';
import { AtlusRevenueService } from '../../services/atlasRevenueService';
import { BillingService } from '../../services/billingService';

interface RejectedClaim {
  id: string;
  encounter_id: string;
  control_number?: string;
  total_charge: number;
  status: string;
  response_payload?: string;
  created_at: string;
  claim_lines?: any[];
  claim_status_history?: any[];
}

export const ClaimsAppealsPanel: React.FC = () => {
  const [rejectedClaims, setRejectedClaims] = useState<RejectedClaim[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedClaim, setSelectedClaim] = useState<RejectedClaim | null>(null);
  const [appealLetter, setAppealLetter] = useState('');
  const [generatingLetter, setGeneratingLetter] = useState(false);

  useEffect(() => {
    loadRejectedClaims();
  }, []);

  const loadRejectedClaims = async () => {
    setLoading(true);
    try {
      const claims = await AtlusRevenueService.getRejectedClaims(20);
      setRejectedClaims(claims as RejectedClaim[]);
    } catch (error) {
      console.error('Failed to load rejected claims:', error);
    } finally {
      setLoading(false);
    }
  };

  const generateAppealLetter = async (claim: RejectedClaim) => {
    setGeneratingLetter(true);
    try {
      // AI-generated appeal letter template
      const rejectionReason = claim.response_payload || 'Unspecified denial reason';
      const claimAmount = claim.total_charge?.toFixed(2) || '0.00';

      const letter = `
APPEAL LETTER FOR CLAIM: ${claim.control_number || claim.id}

Date: ${new Date().toLocaleDateString()}

To: Claims Review Department
Re: Appeal of Denied Claim ${claim.control_number || claim.id}

Dear Claims Reviewer,

I am writing to formally appeal the denial of the above-referenced claim in the amount of $${claimAmount}, which was denied for the following reason:

"${rejectionReason}"

JUSTIFICATION FOR APPEAL:

This claim was properly coded and documented according to CMS guidelines and represents medically necessary services rendered to the patient. The services provided meet the criteria for coverage as outlined in the patient's benefit plan.

SUPPORTING DOCUMENTATION:

1. Complete medical record demonstrating medical necessity
2. Procedure codes verified against current CPT/HCPCS codes
3. Diagnosis codes validated using ICD-10-CM guidelines
4. Documentation supports the level of service billed

REQUESTED ACTION:

We respectfully request that this claim be reconsidered and processed for payment in full. The denial appears to be based on [administrative error/coding clarification/medical necessity documentation], which we have addressed in the attached supporting documentation.

If additional information is required to process this appeal, please contact our office immediately at the number below.

Thank you for your prompt attention to this matter. We look forward to your favorable reconsideration.

Sincerely,

[Billing Provider Name]
[NPI]
[Contact Information]

---
Generated by WellFit Atlus Revenue Engine
Generated: ${new Date().toISOString()}
      `.trim();

      setAppealLetter(letter);
    } catch (error) {
      console.error('Failed to generate appeal letter:', error);
    } finally {
      setGeneratingLetter(false);
    }
  };

  const handleResubmit = async (claimId: string) => {
    try {
      await BillingService.updateClaimStatus(claimId, 'submitted', 'Resubmitted after appeal');
      alert('Claim marked as resubmitted. Monitor in Revenue Dashboard.');
      loadRejectedClaims();
    } catch (error: any) {
      alert('Failed to resubmit claim: ' + error.message);
    }
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
    }).format(amount);
  };

  const totalRejectedRevenue = rejectedClaims.reduce(
    (sum, claim) => sum + (claim.total_charge || 0),
    0
  );

  return (
    <div className="max-w-7xl mx-auto p-6 bg-white rounded-xl shadow-xl">
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900">ðŸ”„ Claims Appeals & Resubmission</h2>
        <p className="text-sm text-gray-600 mt-1">
          Review denied claims and generate appeal letters
        </p>
      </div>

      {/* Summary Banner */}
      {rejectedClaims.length > 0 && (
        <div className="mb-6 p-6 bg-gradient-to-r from-red-50 to-orange-50 rounded-xl border-2 border-red-200">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-lg font-bold text-red-900">
                Revenue Leakage Alert
              </h3>
              <p className="text-sm text-red-700 mt-1">
                {rejectedClaims.length} rejected claims requiring attention
              </p>
            </div>
            <div className="text-right">
              <div className="text-3xl font-bold text-red-600">
                {formatCurrency(totalRejectedRevenue)}
              </div>
              <div className="text-xs text-red-700">At Risk</div>
            </div>
          </div>
        </div>
      )}

      {loading && (
        <div className="text-center py-12">
          <div className="animate-spin inline-block w-12 h-12 border-4 border-red-600 border-t-transparent rounded-full"></div>
          <p className="mt-4 text-gray-600">Loading rejected claims...</p>
        </div>
      )}

      {!loading && rejectedClaims.length === 0 && (
        <div className="text-center py-12 bg-green-50 rounded-xl border-2 border-green-200">
          <span className="text-6xl">âœ…</span>
          <h3 className="text-xl font-bold text-green-900 mt-4">No Rejected Claims!</h3>
          <p className="text-green-700 mt-2">All claims are processing successfully.</p>
        </div>
      )}

      {!loading && rejectedClaims.length > 0 && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Claims List */}
          <div className="space-y-4">
            <h3 className="font-semibold text-gray-900 mb-3">Rejected Claims</h3>
            {rejectedClaims.map((claim) => (
              <div
                key={claim.id}
                className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${
                  selectedClaim?.id === claim.id
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
                onClick={() => setSelectedClaim(claim)}
              >
                <div className="flex items-start justify-between mb-2">
                  <div>
                    <div className="font-semibold text-gray-900">
                      Claim #{claim.control_number || claim.id.slice(0, 8)}
                    </div>
                    <div className="text-xs text-gray-500">
                      {new Date(claim.created_at).toLocaleDateString()}
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="text-lg font-bold text-red-600">
                      {formatCurrency(claim.total_charge || 0)}
                    </div>
                    <span className="px-2 py-1 text-xs font-semibold bg-red-100 text-red-800 rounded">
                      REJECTED
                    </span>
                  </div>
                </div>

                {claim.response_payload && (
                  <div className="mt-2 p-2 bg-red-50 rounded text-xs text-red-700">
                    <strong>Reason:</strong> {claim.response_payload.slice(0, 100)}...
                  </div>
                )}

                <div className="mt-3 flex gap-2">
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      setSelectedClaim(claim);
                      generateAppealLetter(claim);
                    }}
                    className="px-3 py-1 text-xs bg-blue-600 hover:bg-blue-700 text-white rounded"
                  >
                    Generate Appeal
                  </button>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      handleResubmit(claim.id);
                    }}
                    className="px-3 py-1 text-xs bg-green-600 hover:bg-green-700 text-white rounded"
                  >
                    Resubmit
                  </button>
                </div>
              </div>
            ))}
          </div>

          {/* Appeal Letter Generator */}
          <div>
            <h3 className="font-semibold text-gray-900 mb-3">Appeal Letter</h3>

            {!selectedClaim && (
              <div className="p-8 text-center bg-gray-50 rounded-lg border-2 border-dashed border-gray-300">
                <p className="text-gray-600">Select a claim to generate appeal letter</p>
              </div>
            )}

            {selectedClaim && !appealLetter && (
              <div className="p-6 bg-blue-50 rounded-lg border border-blue-200">
                <p className="text-blue-900 mb-4">
                  Click "Generate Appeal" to create an AI-assisted appeal letter for this claim.
                </p>
                <button
                  onClick={() => generateAppealLetter(selectedClaim)}
                  disabled={generatingLetter}
                  className="w-full px-4 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white font-semibold rounded-lg"
                >
                  {generatingLetter ? 'Generating...' : 'Generate Appeal Letter'}
                </button>
              </div>
            )}

            {appealLetter && (
              <div className="space-y-4">
                <textarea
                  value={appealLetter}
                  onChange={(e) => setAppealLetter(e.target.value)}
                  rows={20}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg font-mono text-sm"
                />

                <div className="flex gap-3">
                  <button
                    onClick={() => {
                      navigator.clipboard.writeText(appealLetter);
                      alert('Appeal letter copied to clipboard!');
                    }}
                    className="flex-1 px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white font-semibold rounded-lg"
                  >
                    ðŸ“‹ Copy Letter
                  </button>
                  <button
                    onClick={() => {
                      const blob = new Blob([appealLetter], { type: 'text/plain' });
                      const url = URL.createObjectURL(blob);
                      const a = document.createElement('a');
                      a.href = url;
                      a.download = `appeal-${selectedClaim?.control_number || 'claim'}.txt`;
                      a.click();
                    }}
                    className="flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-lg"
                  >
                    ðŸ’¾ Download
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Instructions */}
      <div className="mt-8 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
        <h3 className="font-semibold text-yellow-900 mb-2">âš¡ Quick Appeal Process</h3>
        <ol className="text-sm text-yellow-800 space-y-1 list-decimal list-inside">
          <li>Review rejection reason in claim details</li>
          <li>Click "Generate Appeal" for AI-assisted letter</li>
          <li>Customize letter with additional clinical details</li>
          <li>Download or copy appeal letter</li>
          <li>Submit to payer via their portal/fax/mail</li>
          <li>Click "Resubmit" to track claim status</li>
        </ol>
      </div>
    </div>
  );
};

export default ClaimsAppealsPanel;
